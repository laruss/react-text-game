"use strict";(self.webpackChunk_react_text_game_docs=self.webpackChunk_react_text_game_docs||[]).push([[5115],{531:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(2098);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},5220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api/core/type-aliases/InteractiveMapType","title":"Type Alias: InteractiveMapType","description":"InteractiveMapType = Pick\\\\ & object","source":"@site/docs/api/core/type-aliases/InteractiveMapType.md","sourceDirName":"api/core/type-aliases","slug":"/api/core/type-aliases/InteractiveMapType","permalink":"/api/core/type-aliases/InteractiveMapType","draft":false,"unlisted":false,"editUrl":"https://github.com/laruss/tree/main/apps/docs/docs/api/core/type-aliases/InteractiveMapType.md","tags":[],"version":"current","frontMatter":{}}');var a=t(90),i=t(531);const r={},c="Type Alias: InteractiveMapType",o={},l=[{value:"Type Declaration",id:"type-declaration",level:2},{value:"bgImage?",id:"bgimage",level:3},{value:"hotspots",id:"hotspots",level:3},{value:"image",id:"image",level:3},{value:"Remarks",id:"remarks",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"type-alias-interactivemaptype",children:"Type Alias: InteractiveMapType"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"InteractiveMapType"})," = ",(0,a.jsx)(n.code,{children:"Pick"}),"<",(0,a.jsx)(n.a,{href:"/api/core/type-aliases/InteractiveMapOptions",children:(0,a.jsx)(n.code,{children:"InteractiveMapOptions"})}),", ",(0,a.jsx)(n.code,{children:'"caption"'})," | ",(0,a.jsx)(n.code,{children:'"props"'})," | ",(0,a.jsx)(n.code,{children:'"classNames"'}),"> & ",(0,a.jsx)(n.code,{children:"object"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Defined in: ",(0,a.jsx)(n.a,{href:"https://github.com/laruss/react-text-game/blob/21bfc433e29f86c4a02131cf4fd24f7723dbe21b/packages/core/src/passages/interactiveMap/types.ts#L850",children:"passages/interactiveMap/types.ts:850"})]}),"\n",(0,a.jsxs)(n.p,{children:["Resolved/processed interactive map data returned by ",(0,a.jsx)(n.code,{children:"InteractiveMap.display()"}),".\nAll dynamic values (functions) have been resolved to their concrete values."]}),"\n",(0,a.jsx)(n.h2,{id:"type-declaration",children:"Type Declaration"}),"\n",(0,a.jsx)(n.h3,{id:"bgimage",children:"bgImage?"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"optional"})," ",(0,a.jsx)(n.strong,{children:"bgImage"}),": ",(0,a.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Resolved background image URL/path.\nIf the original was a function, it has been called and resolved to a string.\nUndefined if no background image was specified."}),"\n",(0,a.jsx)(n.h3,{id:"hotspots",children:"hotspots"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"hotspots"}),": ",(0,a.jsx)(n.a,{href:"/api/core/type-aliases/AnyHotspot",children:(0,a.jsx)(n.code,{children:"AnyHotspot"})}),"[]"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Array of resolved, concrete hotspots.\nAll dynamic hotspots (functions) have been evaluated.\nHotspots that returned ",(0,a.jsx)(n.code,{children:"undefined"})," have been filtered out."]}),"\n",(0,a.jsx)(n.h3,{id:"image",children:"image"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"image"}),": ",(0,a.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Resolved map image URL/path.\nIf the original was a function, it has been called and resolved to a string."}),"\n",(0,a.jsx)(n.h2,{id:"remarks",children:"Remarks"}),"\n",(0,a.jsx)(n.p,{children:"This type represents the map after processing:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"All function-based images resolved to strings"}),"\n",(0,a.jsx)(n.li,{children:"All conditional hotspots evaluated and filtered (undefined removed)"}),"\n",(0,a.jsx)(n.li,{children:"All dynamic hotspot properties resolved"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This is the data structure consumed by the UI rendering layer."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const map = newInteractiveMap('world', {\n  image: () => `/maps/${season}.jpg`,\n  hotspots: [\n    () => hasKey ? { type: 'label', content: 'Door', ... } : undefined\n  ]\n});\n\n// After calling display(), all functions are resolved:\nconst displayData: InteractiveMapType = map.display();\n// displayData.image is now a string like '/maps/winter.jpg'\n// displayData.hotspots contains only concrete hotspots (undefined filtered out)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);