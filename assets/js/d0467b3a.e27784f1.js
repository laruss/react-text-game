"use strict";(self.webpackChunk_react_text_game_docs=self.webpackChunk_react_text_game_docs||[]).push([[2682],{1184:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(4041);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},8398:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"migrations","title":"Save Migrations","description":"A complete guide to the save migration system for versioning and migrating game saves","source":"@site/docs/migrations.md","sourceDirName":".","slug":"/migrations","permalink":"/react-text-game/migrations","draft":false,"unlisted":false,"editUrl":"https://github.com/laruss/react-text-game/tree/main/apps/docs/docs/migrations.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Save Migrations","description":"A complete guide to the save migration system for versioning and migrating game saves"},"sidebar":"docsSidebar","previous":{"title":"Core Concepts","permalink":"/react-text-game/core-concepts"}}');var t=i(1085),s=i(1184);const a={sidebar_position:4,title:"Save Migrations",description:"A complete guide to the save migration system for versioning and migrating game saves"},o="Save Migration System",l={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Register Migrations",id:"1-register-migrations",level:3},{value:"2. That&#39;s It!",id:"2-thats-it",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"Migration Chain",id:"migration-chain",level:3},{value:"Validation",id:"validation",level:3},{value:"Usage Guide",id:"usage-guide",level:2},{value:"Where to Register Migrations",id:"where-to-register-migrations",level:3},{value:"Migration Functions",id:"migration-functions",level:3},{value:"Type Safety with Generic Types",id:"type-safety-with-generic-types",level:3},{value:"Using Generic Types",id:"using-generic-types",level:4},{value:"When to Use Generics",id:"when-to-use-generics",level:4},{value:"Semantic Versioning Strategy",id:"semantic-versioning-strategy",level:2},{value:"When to Register a Migration",id:"when-to-register-a-migration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Use Descriptive Descriptions",id:"1-use-descriptive-descriptions",level:3},{value:"2. Provide Sensible Defaults",id:"2-provide-sensible-defaults",level:3},{value:"3. Handle Optional Fields",id:"3-handle-optional-fields",level:3},{value:"4. Test Your Migrations",id:"4-test-your-migrations",level:3},{value:"5. Keep Migrations Simple",id:"5-keep-migrations-simple",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"<code>registerMigration&lt;T&gt;(migration: SaveMigration&lt;T&gt;)</code>",id:"registermigrationtmigration-savemigrationt",level:3},{value:"<code>findMigrationPath(from: string, to: string): SaveMigration[] | null</code>",id:"findmigrationpathfrom-string-to-string-savemigration--null",level:3},{value:"<code>runMigrations&lt;T&gt;(data, from, to, options?): MigrationResult&lt;T&gt;</code>",id:"runmigrationstdata-from-to-options-migrationresultt",level:3},{value:"<code>validateMigrations(latestVersion: string)</code>",id:"validatemigrationslatestversion-string",level:3},{value:"Examples",id:"examples",level:2},{value:"Example 1: Adding a New Field",id:"example-1-adding-a-new-field",level:3},{value:"Example 2: Renaming a Field",id:"example-2-renaming-a-field",level:3},{value:"Example 3: Restructuring Data",id:"example-3-restructuring-data",level:3},{value:"Example 4: Complex Migration Chain",id:"example-4-complex-migration-chain",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"&quot;No migration path found&quot;",id:"no-migration-path-found",level:3},{value:"&quot;Dead end detected&quot;",id:"dead-end-detected",level:3},{value:"Migration Fails",id:"migration-fails",level:3},{value:"Dev Mode Warnings",id:"dev-mode-warnings",level:3},{value:"Support",id:"support",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"save-migration-system",children:"Save Migration System"})}),"\n",(0,t.jsx)(n.p,{children:"A complete solution for versioning and migrating game saves in your text game engine."}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#quick-start",children:"Quick Start"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#how-it-works",children:"How It Works"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#usage-guide",children:"Usage Guide"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#semantic-versioning-strategy",children:"Semantic Versioning Strategy"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#api-reference",children:"API Reference"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#examples",children:"Examples"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#troubleshooting",children:"Troubleshooting"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The migration system allows you to make changes to your game's save structure while maintaining compatibility with existing player saves. When a player loads an old save, the system automatically applies registered migrations to bring the save data up to date."}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Automatic"}),": Migrations run automatically when loading saves"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Sequential"}),": Migrates step-by-step through version history (safer than big jumps)"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Testable"}),": Each migration is a pure function"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Transparent"}),": Logs what migrations were applied"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Safe"}),": Validates migration chain in dev mode"]}),"\n",(0,t.jsxs)(n.li,{children:["\u2705 ",(0,t.jsx)(n.strong,{children:"Simple"}),": Just 1 function per breaking change"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,t.jsx)(n.h3,{id:"1-register-migrations",children:"1. Register Migrations"}),"\n",(0,t.jsx)(n.p,{children:"When you make a breaking change to your save structure, register a migration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { registerMigration } from \'@react-text-game/core/saves\';\n\n// After updating your game version to 1.1.0\nregisterMigration({\n  from: "1.0.0",\n  to: "1.1.0",\n  description: "Added player inventory system",\n  migrate: (save) => ({\n    ...save,\n    player: {\n      ...save.player,\n      inventory: [] // Add default value for new field\n    }\n  })\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-thats-it",children:"2. That's It!"}),"\n",(0,t.jsx)(n.p,{children:"Migrations are automatically applied when players load their saves. No additional code needed!"}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsx)(n.h3,{id:"migration-chain",children:"Migration Chain"}),"\n",(0,t.jsx)(n.p,{children:"When a player loads a save from an older version, the system:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Detects"})," the version difference"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Finds"})," the shortest migration path using BFS"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Applies"})," each migration sequentially"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"})," the result"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Loads"})," the migrated data"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example migration chain:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Save v1.0.0 \u2192 Migration(1.0.0\u21921.1.0) \u2192 Migration(1.1.0\u21921.2.0) \u2192 Migration(1.2.0\u21922.0.0) \u2192 Current v2.0.0\n"})}),"\n",(0,t.jsx)(n.h3,{id:"validation",children:"Validation"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.strong,{children:"dev mode"}),", the system validates your migration chain on startup:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Checks for orphaned versions"}),"\n",(0,t.jsx)(n.li,{children:"Ensures all base versions can reach the current version"}),"\n",(0,t.jsx)(n.li,{children:"Warns about dead ends"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usage-guide",children:"Usage Guide"}),"\n",(0,t.jsx)(n.h3,{id:"where-to-register-migrations",children:"Where to Register Migrations"}),"\n",(0,t.jsxs)(n.p,{children:["Register migrations ",(0,t.jsx)(n.strong,{children:"after"})," ",(0,t.jsx)(n.code,{children:"Game.init()"})," in your game's entry point:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// src/index.tsx or src/App.tsx\n\nimport { Game, registerMigration } from \'@react-text-game/core\';\n\nasync function initGame() {\n  await Game.init({\n    gameName: "My Adventure Game",\n    gameVersion: "2.0.0", // Your current version\n    isDevMode: import.meta.env.DEV\n  });\n\n  // Register all your migrations\n  registerMigration({\n    from: "1.0.0",\n    to: "1.1.0",\n    description: "Added inventory",\n    migrate: addInventorySystem\n  });\n\n  registerMigration({\n    from: "1.1.0",\n    to: "2.0.0",\n    description: "Renamed \'hp\' to \'health\'",\n    migrate: renameHpToHealth\n  });\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"migration-functions",children:"Migration Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Migrations should be ",(0,t.jsx)(n.strong,{children:"pure functions"})," that don't mutate the input:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// \u2705 GOOD: Returns new object\nconst migrate = (save) => ({\n  ...save,\n  newField: "default value"\n});\n\n// \u274c BAD: Mutates input\nconst migrate = (save) => {\n  save.newField = "default value";\n  return save;\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"type-safety-with-generic-types",children:"Type Safety with Generic Types"}),"\n",(0,t.jsx)(n.p,{children:"The migration system supports TypeScript generics for improved type safety. You can specify the exact shape of your save data for each migration, which provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Better IDE autocomplete"})," when working with save data fields"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compile-time type checking"})," for migration logic"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Self-documenting code"})," showing what fields the migration affects"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"using-generic-types",children:"Using Generic Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Define the shape of data this migration works with\ninterface PlayerInventoryData {\n  player?: {\n    inventory: string[];\n  };\n}\n\n// Use the generic type parameter\nregisterMigration<PlayerInventoryData>({\n  from: "1.0.0",\n  to: "1.1.0",\n  description: "Added player inventory",\n  migrate: (save) => {\n    const player = save.player || {};\n    return {\n      ...save,\n      player: {\n        ...player,\n        inventory: [], // TypeScript knows this should be string[]\n      }\n    };\n  }\n});\n'})}),"\n",(0,t.jsx)(n.h4,{id:"when-to-use-generics",children:"When to Use Generics"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u2705 Use generics when:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Working with complex nested data structures"}),"\n",(0,t.jsx)(n.li,{children:"The migration logic is non-trivial"}),"\n",(0,t.jsx)(n.li,{children:"You want IDE autocomplete for specific fields"}),"\n",(0,t.jsx)(n.li,{children:"Type safety would help prevent bugs"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u26a0\ufe0f Optional for:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Simple migrations (adding a top-level field)"}),"\n",(0,t.jsx)(n.li,{children:"One-line transformations"}),"\n",(0,t.jsx)(n.li,{children:"Migrations where types are obvious"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Simple migration - generics optional\nregisterMigration({\n  from: "1.0.0",\n  to: "1.1.0",\n  description: "Add settings",\n  migrate: (save) => ({ ...save, settings: {} })\n});\n\n// Complex migration - generics recommended\ninterface OldInventoryFormat {\n  inventory?: string[];\n}\n\nregisterMigration<OldInventoryFormat>({\n  from: "1.0.0",\n  to: "2.0.0",\n  description: "Convert inventory to objects",\n  migrate: (save) => {\n    const items = (save.inventory || []).map((name, i) => ({\n      id: `item_${i}`,\n      name,\n      quantity: 1\n    }));\n    return { ...save, inventory: items };\n  }\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"semantic-versioning-strategy",children:"Semantic Versioning Strategy"}),"\n",(0,t.jsxs)(n.p,{children:["Follow ",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"semver"})," to communicate the impact of changes:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Version Change"}),(0,t.jsx)(n.th,{children:"Migration?"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Patch"})," (",(0,t.jsx)(n.code,{children:"1.0.0"})," \u2192 ",(0,t.jsx)(n.code,{children:"1.0.1"}),")"]}),(0,t.jsx)(n.td,{children:"\u274c No"}),(0,t.jsx)(n.td,{children:"Bug fixes, no save structure changes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Minor"})," (",(0,t.jsx)(n.code,{children:"1.0.0"})," \u2192 ",(0,t.jsx)(n.code,{children:"1.1.0"}),")"]}),(0,t.jsx)(n.td,{children:"\u26a0\ufe0f Optional"}),(0,t.jsx)(n.td,{children:"New optional fields with defaults"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.strong,{children:"Major"})," (",(0,t.jsx)(n.code,{children:"1.0.0"})," \u2192 ",(0,t.jsx)(n.code,{children:"2.0.0"}),")"]}),(0,t.jsx)(n.td,{children:"\u2705 Required"}),(0,t.jsx)(n.td,{children:"Breaking changes, removed/renamed fields"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"when-to-register-a-migration",children:"When to Register a Migration"}),"\n",(0,t.jsx)(n.p,{children:"Register a migration when you:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Add a new required field"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Rename or remove a field"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Change the structure of existing data"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Change data types (string \u2192 number)"}),"\n",(0,t.jsx)(n.li,{children:"\u274c Fix a bug (no migration needed)"}),"\n",(0,t.jsx)(n.li,{children:"\u274c Add a new passage or entity (no migration needed)"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-use-descriptive-descriptions",children:"1. Use Descriptive Descriptions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 GOOD\ndescription: \"Renamed 'hp' field to 'health' in player object\"\n\n// \u274c BAD\ndescription: \"Updated player\"\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-provide-sensible-defaults",children:"2. Provide Sensible Defaults"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"migrate: (save) => ({\n  ...save,\n  player: {\n    ...save.player,\n    inventory: [], // Empty array for new players\n    gold: 0,       // Start with 0 gold\n    level: 1       // Default level\n  }\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-handle-optional-fields",children:"3. Handle Optional Fields"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"migrate: (save) => {\n  const player = save.player as any;\n  return {\n    ...save,\n    player: {\n      ...player,\n      // Use existing value if present, otherwise default\n      health: player.hp ?? player.health ?? 100\n    }\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-test-your-migrations",children:"4. Test Your Migrations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { runMigrations } from '@react-text-game/core/saves';\n\ndescribe('Save Migrations', () => {\n  it('should migrate from 1.0.0 to 1.1.0', () => {\n    const oldSave = {\n      player: { name: \"Hero\" }\n    };\n\n    const result = runMigrations(oldSave, \"1.0.0\", \"1.1.0\");\n\n    expect(result.success).toBe(true);\n    expect(result.data.player.inventory).toEqual([]);\n  });\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-keep-migrations-simple",children:"5. Keep Migrations Simple"}),"\n",(0,t.jsx)(n.p,{children:"One migration = one logical change:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// \u2705 GOOD: One clear change\nregisterMigration({\n  from: "1.0.0",\n  to: "1.1.0",\n  description: "Added inventory",\n  migrate: (save) => ({ ...save, inventory: [] })\n});\n\n// \u274c BAD: Multiple unrelated changes\nregisterMigration({\n  from: "1.0.0",\n  to: "1.1.0",\n  description: "Added inventory, renamed hp, changed level system",\n  migrate: (save) => { /* complex changes */ }\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,t.jsx)(n.h3,{id:"registermigrationtmigration-savemigrationt",children:(0,t.jsx)(n.code,{children:"registerMigration<T>(migration: SaveMigration<T>)"})}),"\n",(0,t.jsx)(n.p,{children:"Registers a migration function."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Type Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"T"})," - Optional generic type specifying the shape of the save data this migration operates on. Extends ",(0,t.jsx)(n.code,{children:"MigrationGameSaveState"})," (which is ",(0,t.jsx)(n.code,{children:"Partial<GameSaveState> & Record<string, unknown>"}),"). Defaults to ",(0,t.jsx)(n.code,{children:"GameSaveState"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"migration.from"})," - Source version (e.g., ",(0,t.jsx)(n.code,{children:'"1.0.0"'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"migration.to"})," - Target version (e.g., ",(0,t.jsx)(n.code,{children:'"1.1.0"'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"migration.description"})," - Human-readable description"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"migration.migrate"})," - Pure function that transforms the data"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Throws:"})," Error if migration already registered for the same from\u2192to path."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// With generic type for type safety\ninterface MyData { player?: { inventory: string[] } }\nregisterMigration<MyData>({\n  from: "1.0.0",\n  to: "1.1.0",\n  description: "Add inventory",\n  migrate: (save) => ({ ...save, player: { ...save.player, inventory: [] } })\n});\n\n// Without generic type (uses default GameSaveState)\nregisterMigration({\n  from: "1.1.0",\n  to: "1.2.0",\n  description: "Add quests",\n  migrate: (save) => ({ ...save, quests: [] })\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"findmigrationpathfrom-string-to-string-savemigration--null",children:(0,t.jsx)(n.code,{children:"findMigrationPath(from: string, to: string): SaveMigration[] | null"})}),"\n",(0,t.jsx)(n.p,{children:"Finds the shortest migration path between two versions."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," Array of migrations to apply, or ",(0,t.jsx)(n.code,{children:"null"})," if no path exists."]}),"\n",(0,t.jsx)(n.h3,{id:"runmigrationstdata-from-to-options-migrationresultt",children:(0,t.jsx)(n.code,{children:"runMigrations<T>(data, from, to, options?): MigrationResult<T>"})}),"\n",(0,t.jsx)(n.p,{children:"Runs a migration chain."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Type Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"T"})," - Optional generic type for the expected result data structure. Defaults to ",(0,t.jsx)(n.code,{children:"GameSaveState"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data"})," - The save data to migrate"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"from"})," - Source version (e.g., ",(0,t.jsx)(n.code,{children:'"1.0.0"'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"to"})," - Target version (e.g., ",(0,t.jsx)(n.code,{children:'"2.0.0"'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options?"})," - Optional migration options"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Options:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"strict?: boolean"})," - Throw error if no path found (default: ",(0,t.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"verbose?: boolean"})," - Log migration steps (default: dev mode setting)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"MigrationResult<T>"})," with the following structure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"{\n  success: boolean;\n  data?: T;                    // Migrated data (if successful), defaults to GameSaveState\n  error?: string;              // Error message (if failed)\n  migrationsApplied: Array<{   // List of applied migrations\n    from: string;\n    to: string;\n    description: string;\n  }>;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Basic usage without type parameter\nconst result = runMigrations(oldSave, "1.0.0", "2.0.0");\nif (result.success) {\n  console.log("Migration successful:", result.data);\n}\n\n// Type-safe usage with expected result structure\ntype NewSaveFormat = {\n  player: { stats: { health: number; mana: number } }\n} & Record<string, unknown>;\n\nconst result = runMigrations<NewSaveFormat>(oldSave, "1.0.0", "2.0.0");\nif (result.success && result.data) {\n  // TypeScript knows the structure of result.data\n  console.log("Health:", result.data.player.stats.health);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"validatemigrationslatestversion-string",children:(0,t.jsx)(n.code,{children:"validateMigrations(latestVersion: string)"})}),"\n",(0,t.jsx)(n.p,{children:"Validates the migration chain."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"{\n  valid: boolean;\n  issues: string[];  // List of validation issues\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.h3,{id:"example-1-adding-a-new-field",children:"Example 1: Adding a New Field"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Game v1.1.0: Added inventory system\nregisterMigration({\n  from: "1.0.0",\n  to: "1.1.0",\n  description: "Added player inventory",\n  migrate: (save) => ({\n    ...save,\n    player: {\n      ...save.player,\n      inventory: []\n    }\n  })\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-2-renaming-a-field",children:"Example 2: Renaming a Field"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Game v1.2.0: Renamed 'hp' to 'health'\nregisterMigration({\n  from: \"1.1.0\",\n  to: \"1.2.0\",\n  description: \"Renamed 'hp' to 'health'\",\n  migrate: (save) => {\n    const { hp, ...playerRest } = save.player as any;\n    return {\n      ...save,\n      player: {\n        ...playerRest,\n        health: hp ?? 100 // Use existing hp or default to 100\n      }\n    };\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-3-restructuring-data",children:"Example 3: Restructuring Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Game v2.0.0: Split player stats into separate object\nregisterMigration({\n  from: "1.2.0",\n  to: "2.0.0",\n  description: "Restructured player stats",\n  migrate: (save) => {\n    const player = save.player as any;\n    return {\n      ...save,\n      player: {\n        name: player.name,\n        stats: {\n          health: player.health,\n          mana: player.mana,\n          strength: player.strength\n        }\n      }\n    };\n  }\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-4-complex-migration-chain",children:"Example 4: Complex Migration Chain"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Registering multiple migrations for a complex update path\nconst migrations = [\n  {\n    from: "1.0.0",\n    to: "1.1.0",\n    description: "Added inventory",\n    migrate: addInventory\n  },\n  {\n    from: "1.1.0",\n    to: "1.2.0",\n    description: "Added quest system",\n    migrate: addQuests\n  },\n  {\n    from: "1.2.0",\n    to: "2.0.0",\n    description: "Complete game redesign",\n    migrate: redesignGame\n  }\n];\n\nmigrations.forEach(registerMigration);\n\n// A player with save v1.0.0 will automatically go through:\n// 1.0.0 \u2192 1.1.0 \u2192 1.2.0 \u2192 2.0.0\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.h3,{id:"no-migration-path-found",children:'"No migration path found"'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," No registered migrations connect the save version to the current version."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution:"})," Register missing migrations to complete the chain."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// If you have migrations 1.0.0\u21921.1.0 and 1.2.0\u21922.0.0\n// You need to add 1.1.0\u21921.2.0 to complete the chain\n\nregisterMigration({\n  from: "1.1.0",\n  to: "1.2.0",\n  description: "Bridge version",\n  migrate: (save) => save // No changes needed\n});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"dead-end-detected",children:'"Dead end detected"'}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," A version has incoming migrations but no outgoing migrations to reach the current version."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution:"})," Add a migration from the dead-end version to the next version."]}),"\n",(0,t.jsx)(n.h3,{id:"migration-fails",children:"Migration Fails"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," A migration throws an error or returns invalid data."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Debug:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Check console for error details"}),"\n",(0,t.jsx)(n.li,{children:"Test the migration function in isolation"}),"\n",(0,t.jsx)(n.li,{children:"Verify the input data structure matches expectations"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Add defensive checks\nmigrate: (save) => {\n  if (!save.player) {\n    console.error("Migration failed: save.player is undefined");\n    return save; // Return unchanged if something is wrong\n  }\n\n  return {\n    ...save,\n    player: {\n      ...save.player,\n      inventory: []\n    }\n  };\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"dev-mode-warnings",children:"Dev Mode Warnings"}),"\n",(0,t.jsx)(n.p,{children:"In dev mode, you may see warnings about:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Orphaned versions"}),": Versions with no path to current version"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Dead ends"}),": Versions that can't reach the current version"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Missing migrations"}),": Gaps in the migration chain"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These are helpful for catching migration issues before they affect players."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,t.jsx)(n.p,{children:"For issues or questions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Check the ",(0,t.jsx)(n.a,{href:"/",children:"main documentation"})]}),"\n",(0,t.jsxs)(n.li,{children:["Report bugs at ",(0,t.jsx)(n.a,{href:"https://github.com/laruss/react-text-game/issues",children:"GitHub Issues"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);