"use strict";(self.webpackChunk_react_text_game_docs=self.webpackChunk_react_text_game_docs||[]).push([[8184],{1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(4041);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},2089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"core-concepts","title":"Core Concepts","description":"Understanding the core concepts of React Text Game will help you build powerful interactive narratives.","source":"@site/docs/core-concepts.md","sourceDirName":".","slug":"/core-concepts","permalink":"/react-text-game/core-concepts","draft":false,"unlisted":false,"editUrl":"https://github.com/laruss/react-text-game/tree/main/apps/docs/docs/core-concepts.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Getting Started","permalink":"/react-text-game/getting-started"}}');var a=t(1085),i=t(1184);const r={sidebar_position:3},c="Core Concepts",l={},o=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Game Initialization",id:"game-initialization",level:2},{value:"Entities",id:"entities",level:2},{value:"Entity Factory (Recommended)",id:"entity-factory-recommended",level:3},{value:"Advanced Entities (Class-Based)",id:"advanced-entities-class-based",level:3},{value:"Passages",id:"passages",level:2},{value:"Story Passages",id:"story-passages",level:3},{value:"Interactive Map Passages",id:"interactive-map-passages",level:3},{value:"Widget Passages",id:"widget-passages",level:3},{value:"State Management",id:"state-management",level:2},{value:"Reactive Updates",id:"reactive-updates",level:3},{value:"Storage System",id:"storage-system",level:3},{value:"Navigation",id:"navigation",level:2},{value:"Save System",id:"save-system",level:2},{value:"Using Hooks (UI Package)",id:"using-hooks-ui-package",level:3},{value:"Available Hooks",id:"available-hooks",level:3},{value:"Direct API",id:"direct-api",level:3},{value:"React Hooks",id:"react-hooks",level:2},{value:"useCurrentPassage",id:"usecurrentpassage",level:3},{value:"useGameEntity",id:"usegameentity",level:3},{value:"useGameIsStarted",id:"usegameisstarted",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Initialize First",id:"1-always-initialize-first",level:3},{value:"2. Use Factory Pattern for Simple Entities",id:"2-use-factory-pattern-for-simple-entities",level:3},{value:"3. Organize by Feature",id:"3-organize-by-feature",level:3},{value:"4. Keep Passage Logic Simple",id:"4-keep-passage-logic-simple",level:3},{value:"5. Use TypeScript",id:"5-use-typescript",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"core-concepts",children:"Core Concepts"})}),"\n",(0,a.jsx)(n.p,{children:"Understanding the core concepts of React Text Game will help you build powerful interactive narratives."}),"\n",(0,a.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,a.jsxs)(n.p,{children:["React Text Game uses a ",(0,a.jsx)(n.strong,{children:"registry pattern"})," with ",(0,a.jsx)(n.strong,{children:"reactive state management"})," (Valtio) to create a seamless game development experience."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Game (Central)             \u2502\n\u2502  - Entity Registry                   \u2502\n\u2502  - Passage Registry                  \u2502\n\u2502  - Navigation                        \u2502\n\u2502  - State Management                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                    \u2502\n         \u25bc                    \u25bc\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502  Entities   \u2502      \u2502  Passages   \u2502\n  \u2502  (Valtio)   \u2502      \u2502  (Screens)  \u2502\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                    \u2502\n         \u25bc                    \u25bc\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502        Storage (JSONPath)        \u2502\n  \u2502     - Session Storage            \u2502\n  \u2502     - IndexedDB (Saves)          \u2502\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h2,{id:"game-initialization",children:"Game Initialization"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"IMPORTANT:"})," You must call ",(0,a.jsx)(n.code,{children:"Game.init()"})," before using any other Game methods or creating entities."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Game } from '@react-text-game/core';\n\nawait Game.init({\n  gameName: 'My Adventure',\n  isDevMode: true,\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"The Game class is the central orchestrator that:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Manages entity and passage registries"}),"\n",(0,a.jsx)(n.li,{children:"Handles navigation between passages"}),"\n",(0,a.jsx)(n.li,{children:"Provides save/load functionality"}),"\n",(0,a.jsx)(n.li,{children:"Wraps all objects in Valtio proxies for reactivity"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"entities",children:"Entities"}),"\n",(0,a.jsx)(n.p,{children:"Entities represent game state (player, inventory, quest system, etc.). React Text Game offers two approaches:"}),"\n",(0,a.jsx)(n.h3,{id:"entity-factory-recommended",children:"Entity Factory (Recommended)"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"createEntity"})," factory is the simplest way to create reactive game objects:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { createEntity } from '@react-text-game/core';\n\nconst player = createEntity('player', {\n  name: 'Hero',\n  health: 100,\n  inventory: {\n    gold: 50,\n    items: [] as string[],\n  },\n});\n\n// Direct property access - automatically reactive\nplayer.health -= 10;\nplayer.inventory.items.push('sword');\n\n// Persist changes when needed\nplayer.save();\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Automatic registration with Game"}),"\n",(0,a.jsxs)(n.li,{children:["Direct property access (no ",(0,a.jsx)(n.code,{children:".variables"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"Deep reactivity for nested objects/arrays"}),"\n",(0,a.jsxs)(n.li,{children:["Explicit ",(0,a.jsx)(n.code,{children:"save()"})," calls for controlled persistence"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"advanced-entities-class-based",children:"Advanced Entities (Class-Based)"}),"\n",(0,a.jsxs)(n.p,{children:["For more complex scenarios, extend ",(0,a.jsx)(n.code,{children:"BaseGameObject"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { BaseGameObject } from '@react-text-game/core';\n\nclass Inventory extends BaseGameObject<{ items: string[] }> {\n  constructor() {\n    super({\n      id: 'inventory',\n      variables: { items: [] },\n    });\n  }\n\n  addItem(item: string) {\n    this._variables.items.push(item);\n    this.save();\n  }\n\n  hasItem(item: string): boolean {\n    return this._variables.items.includes(item);\n  }\n}\n\nconst inventory = new Inventory();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"passages",children:"Passages"}),"\n",(0,a.jsx)(n.p,{children:"Passages represent different screens or scenes in your game. Three types are available:"}),"\n",(0,a.jsx)(n.h3,{id:"story-passages",children:"Story Passages"}),"\n",(0,a.jsx)(n.p,{children:"Text-based narrative passages with rich components:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { newStory, Game } from '@react-text-game/core';\n\nconst chapter1 = newStory('chapter1', () => [\n  {\n    type: 'header',\n    content: 'The Beginning',\n    props: { level: 1 }\n  },\n  {\n    type: 'text',\n    content: 'You find yourself in a dark forest...'\n  },\n  {\n    type: 'image',\n    content: '/assets/forest.jpg',\n    props: { alt: 'Dark forest' }\n  },\n  {\n    type: 'actions',\n    content: [\n      {\n        label: 'Go North',\n        action: () => Game.jumpTo('north-path'),\n        color: 'primary'\n      },\n      {\n        label: 'Go South',\n        action: () => Game.jumpTo('south-path'),\n        color: 'secondary'\n      }\n    ]\n  }\n]);\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Available Components:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"text"})," - Text content with ReactNode support"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"header"})," - Semantic headers (h1-h6)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"image"})," - Images with modal viewer"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"video"})," - HTML5 video with controls"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"actions"})," - Interactive button groups"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"conversation"})," - Dialogue with chat/messenger variants"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"anotherStory"})," - Embed other story passages"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"interactive-map-passages",children:"Interactive Map Passages"}),"\n",(0,a.jsx)(n.p,{children:"Map-based interactive passages with hotspots:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { newInteractiveMap, Game } from '@react-text-game/core';\n\nconst worldMap = newInteractiveMap('world-map', {\n  caption: 'World Map',\n  image: '/maps/world.jpg',\n  hotspots: [\n    // Label hotspot on map\n    {\n      type: 'label',\n      content: 'Village',\n      position: { x: 30, y: 40 }, // Percentage (0-100)\n      action: () => Game.jumpTo('village'),\n      props: { color: 'primary' }\n    },\n    // Image hotspot with states\n    {\n      type: 'image',\n      content: {\n        idle: '/icons/chest.png',\n        hover: '/icons/chest-glow.png',\n      },\n      position: { x: 60, y: 70 },\n      action: () => openChest(),\n    },\n    // Conditional hotspot\n    () => player.hasDiscovered('forest') ? {\n      type: 'label',\n      content: 'Forest',\n      position: { x: 80, y: 50 },\n      action: () => Game.jumpTo('forest')\n    } : undefined,\n  ],\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Hotspot Types:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MapLabelHotspot"})," - Text buttons on map (x/y coordinates)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MapImageHotspot"})," - Image buttons with state variants"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"SideLabelHotspot"})," - Text buttons on edges (top/bottom/left/right)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"SideImageHotspot"})," - Image buttons on edges"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MapMenu"})," - Context menu with multiple items"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"widget-passages",children:"Widget Passages"}),"\n",(0,a.jsx)(n.p,{children:"Custom React components as passages:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { newWidget } from '@react-text-game/core';\n\nconst customUI = newWidget('custom-ui', (\n  <div>\n    <h1>Custom Interface</h1>\n    <MyCustomComponent />\n  </div>\n));\n"})}),"\n",(0,a.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,a.jsxs)(n.p,{children:["React Text Game uses ",(0,a.jsx)(n.strong,{children:"Valtio"})," for reactive state and ",(0,a.jsx)(n.strong,{children:"JSONPath"})," for flexible storage queries."]}),"\n",(0,a.jsx)(n.h3,{id:"reactive-updates",children:"Reactive Updates"}),"\n",(0,a.jsx)(n.p,{children:"All entities are automatically wrapped in Valtio proxies:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"const player = createEntity('player', { health: 100 });\n\n// Changes automatically trigger React re-renders\nplayer.health -= 10;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"storage-system",children:"Storage System"}),"\n",(0,a.jsx)(n.p,{children:"The storage system uses JSONPath queries:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Storage } from '@react-text-game/core';\n\n// Get values\nconst health = Storage.getValue<number>('$.player.health');\n\n// Set values\nStorage.setValue('$.player.health', 75);\n\n// Full state serialization\nconst state = Storage.getState();\nStorage.setState(state);\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Protected Paths:"})," System paths (prefixed with ",(0,a.jsx)(n.code,{children:"$._system"}),") are protected and used internally."]}),"\n",(0,a.jsx)(n.h2,{id:"navigation",children:"Navigation"}),"\n",(0,a.jsx)(n.p,{children:"Navigate between passages using the Game API:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { Game } from '@react-text-game/core';\n\n// Jump to a passage by ID\nGame.jumpTo('chapter1');\n\n// Jump to a passage object\nGame.jumpTo(chapter1);\n\n// Set current without navigation effects\nGame.setCurrent('chapter1');\n\n// Get current passage\nconst current = Game.currentPassage;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"save-system",children:"Save System"}),"\n",(0,a.jsx)(n.p,{children:"React Text Game includes a comprehensive save/load system with IndexedDB and encryption support."}),"\n",(0,a.jsx)(n.h3,{id:"using-hooks-ui-package",children:"Using Hooks (UI Package)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { useSaveSlots } from '@react-text-game/core/saves';\n\nfunction SavesList() {\n  const slots = useSaveSlots({ count: 5 });\n\n  return (\n    <div>\n      {slots.map((slot, index) => (\n        <div key={index}>\n          <p>Slot {index}: {slot.data ? 'Saved' : 'Empty'}</p>\n          <button onClick={() => slot.save()}>Save</button>\n          <button onClick={() => slot.load()}>Load</button>\n          <button onClick={() => slot.delete()}>Delete</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"available-hooks",children:"Available Hooks"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useSaveSlots"})," - Get save slots with actions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useSaveGame"})," - Save current state"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useLoadGame"})," - Load saved state"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useDeleteGame"})," - Delete save"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useLastLoadGame"})," - Load most recent save"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useExportSaves"})," - Export saves to encrypted file"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useImportSaves"})," - Import saves from file"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"useRestartGame"})," - Restart from initial state"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"direct-api",children:"Direct API"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { saveGame, loadGame, getAllSaves } from '@react-text-game/core/saves';\n\n// Save manually\nawait saveGame('my-save', gameData, 'Description', screenshotBase64);\n\n// Load by ID\nconst save = await loadGame(1);\n\n// Get all saves\nconst allSaves = await getAllSaves();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"react-hooks",children:"React Hooks"}),"\n",(0,a.jsx)(n.h3,{id:"usecurrentpassage",children:"useCurrentPassage"}),"\n",(0,a.jsx)(n.p,{children:"Monitor the current passage with reactive updates:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { useCurrentPassage } from '@react-text-game/core';\n\nfunction GameScreen() {\n  const passage = useCurrentPassage();\n\n  if (!passage) return <div>Loading...</div>;\n\n  return <div>{/* Render passage */}</div>;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"usegameentity",children:"useGameEntity"}),"\n",(0,a.jsx)(n.p,{children:"Track entity changes with automatic re-renders:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { useGameEntity } from '@react-text-game/core';\n\nfunction PlayerStats({ player }) {\n  const reactivePlayer = useGameEntity(player);\n\n  return <div>Health: {reactivePlayer.health}</div>;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"usegameisstarted",children:"useGameIsStarted"}),"\n",(0,a.jsx)(n.p,{children:"Check if game has been initialized:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"import { useGameIsStarted } from '@react-text-game/core';\n\nfunction GameUI() {\n  const isStarted = useGameIsStarted();\n\n  return isStarted ? <GameScreen /> : <MainMenu />;\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsx)(n.h3,{id:"1-always-initialize-first",children:"1. Always Initialize First"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u2705 Correct\nawait Game.init();\nconst player = createEntity('player', { name: 'Hero' });\n\n// \u274c Wrong\nconst player = createEntity('player', { name: 'Hero' });\nawait Game.init();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-use-factory-pattern-for-simple-entities",children:"2. Use Factory Pattern for Simple Entities"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u2705 Recommended for most cases\nconst player = createEntity('player', { health: 100 });\n\n// \u26a0\ufe0f Use only when you need inheritance or private methods\nclass Player extends BaseGameObject { /* ... */ }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-organize-by-feature",children:"3. Organize by Feature"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"src/game/\n\u251c\u2500\u2500 entities/\n\u2502   \u251c\u2500\u2500 player.ts\n\u2502   \u251c\u2500\u2500 inventory.ts\n\u2502   \u2514\u2500\u2500 index.ts\n\u251c\u2500\u2500 passages/\n\u2502   \u251c\u2500\u2500 story/\n\u2502   \u2502   \u251c\u2500\u2500 intro.ts\n\u2502   \u2502   \u2514\u2500\u2500 chapter1.ts\n\u2502   \u2514\u2500\u2500 maps/\n\u2502       \u2514\u2500\u2500 worldMap.ts\n\u2514\u2500\u2500 index.ts\n"})}),"\n",(0,a.jsx)(n.h3,{id:"4-keep-passage-logic-simple",children:"4. Keep Passage Logic Simple"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u2705 Good - Logic in entity methods\nplayer.takeDamage(10);\n\n// \u274c Avoid - Complex logic in passages\nplayer.health -= 10;\nif (player.health <= 0) { /* ... */ }\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-use-typescript",children:"5. Use TypeScript"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"// \u2705 Type-safe entities\nconst player = createEntity('player', {\n  name: 'Hero',\n  inventory: [] as string[],  // Explicit array type\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/api/core",children:(0,a.jsx)(n.strong,{children:"Core API Reference"})})," - Complete API documentation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/api/ui",children:(0,a.jsx)(n.strong,{children:"UI API Reference"})})," - UI components documentation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/laruss/react-text-game/tree/main/apps/example-game",children:(0,a.jsx)(n.strong,{children:"Example Game"})})," - See it in action"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);